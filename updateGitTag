#!/usr/bin/python
# -*- coding: utf-8 -*-
"""  A Tool to add tag of a git repository.  """
__author__ = 'luochenxun'
__version__ = '1.2.0'
__projectName__ = 'updateGitTag'

import getopt
import sys
import re
from sys import argv
import os.path
import locale
import datetime
import shutil
import json
import collections
import pickle
import base64
import time


def usage():
    """ Print the usage as help """
    print("\n%s is a tool to add tag of a git repository.. version:%s ." %(__projectName__, __version__))
    print("\nUsage: %s tagVersion" % __projectName__)
    print("  -h            : print this usage.")
    print("  -v            : print the version of %s." % __projectName__)
    print("\nFor more infomation of the cmd, you can use option as \'%s add -h\' for farther help." % __projectName__)
    print("")
    _exit()


""" global variables """
gConfig = None
M_PROJECT_REPOSITORY = "https://github.com/luochenxun/pyTools.git"
M_PROJECT_HOME = os.environ['HOME'] + "/.luochenxunTools/"
M_PROJECT_SYS_BIN = '/usr/local/bin/' + __projectName__
M_PROJECT_CONFIG = M_PROJECT_HOME + "config.json"
M_PROJECT_MAIN_FILE = M_PROJECT_HOME + __projectName__



def initEnvironment():
    # if sys.version_info < (3, 3):
    #     _exit("Error, the python version need to be greater than 3.3")
    global gConfig
    gConfig = _readGlobalConfig()
    checkAndAutoUpdate()


def checkAndAutoUpdate(forceUpdate = False):
    """ Check update half of day """
    global M_PROJECT_HOME, M_PROJECT_REPOSITORY, M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN
    global gConfig
    currentTime = int(time.time())
    lastUpdateTime = int(gConfig["date"])
    HalfOneDay = 20 * 60 * 60
    if __projectName__ not in gConfig:
        # update the src code
        homeDir = os.getcwd()
        os.chdir(M_PROJECT_HOME)
        os.system("git clean -df 1>/dev/null 2>/dev/null;git reset --hard HEAD 1>/dev/null 2>/dev/null;git pull 1>/dev/null 2>/dev/null")
        os.chdir(homeDir)
        _autoUpdate()
    elif (lastUpdateTime + HalfOneDay) < currentTime or forceUpdate:
        # update the src code
        homeDir = os.getcwd()
        os.chdir(M_PROJECT_HOME)
        os.system("git clean -df 1>/dev/null 2>/dev/null;git reset --hard HEAD 1>/dev/null 2>/dev/null;git pull 1>/dev/null 2>/dev/null")
        os.chdir(homeDir)
        # check if the tool has a new update
        newToolSrc = open(M_PROJECT_MAIN_FILE)
        for line in newToolSrc:
            match = re.match('__version__ = \'(.+)\'', line)
            if match:
                newToolVersion = match.group(1)
                newToolVersionSplit = newToolVersion.split('.')
                currentVersionSplit = __version__.split('.')
                gConfig[__projectName__] = newToolVersion
                if len(newToolVersionSplit) != len(currentVersionSplit):
                    print('A new version existed, now updating...')
                    _autoUpdate()
                    break
                for i in range(len(newToolVersionSplit)):
                    if int(newToolVersionSplit[i]) > int(currentVersionSplit[i]):
                        print('A new version existed, now updating...')
                        _autoUpdate()
                        break
                    elif int(newToolVersionSplit[i]) < int(currentVersionSplit[i]):
                        break
                break
        _saveGolbalConfig(gConfig)
    if not os.path.exists(M_PROJECT_SYS_BIN):
        _autoUpdate()


def updateTag(tag):
    if tag == None:
        usage()
    os.system("git tag -d " + tag + " 1>/dev/null 2>/dev/null")
    os.system("git push origin --tags 1>/dev/null 2>/dev/null")
    os.system("git tag " + tag)

def _autoUpdate():
    global M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN
    print('Install the new tool to /usr/local/bin/%s' % __projectName__)
    shutil.copy(M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN)
    print('Success!')

def _readGlobalConfig():
    """
    Return the key-value map in config file:
    Config.json
    {
      version: current tool version
      date: the newest time of theck update
    }
    """
    global M_PROJECT_CONFIG
    # default config
    configDic = collections.OrderedDict()
    configDic[__projectName__] = __version__
    configDic["date"] = str(int(time.time()))
    # create a config file if not exists
    if not os.path.exists(M_PROJECT_HOME):
        os.makedirs(M_PROJECT_HOME)
    if not os.path.exists(M_PROJECT_HOME + '.git'):
        shutil.rmtree(M_PROJECT_HOME)
        os.system("git clone " + M_PROJECT_REPOSITORY + ' ' + M_PROJECT_HOME)
    if not os.path.exists(M_PROJECT_CONFIG):
        _saveGolbalConfig(configDic)
    else:  # read the config
        configReader = open(M_PROJECT_CONFIG, 'r')
        try:
            configText = configReader.read()
            configDic = json.loads(configText, object_pairs_hook=collections.OrderedDict)
        except Exception as e:
            _saveGolbalConfig(configDic)
        finally:
            configReader.close()
    return configDic


def _saveGolbalConfig(configDic):
    '''
    Save the given dic to the project's golbal config path:
    Config.json
    {
      version: current tool version
      date: the newest time of theck update
    }
    '''
    global M_PROJECT_CONFIG
    configWritter = open(M_PROJECT_CONFIG, 'w')
    try:
        configDic["date"] = str(int(time.time()))
        configWritter.write(json.dumps(configDic, indent=2))
    finally:
        configWritter.close()


def _exit(msg=None):
    if msg != None:
        print(msg)
    os._exit(1)


def _parseArgv():
    """
    pass the cmd & options of the command
    """
    if len(sys.argv) <= 1:
        usage()
        sys.exit(0)
    try:
        cmd = _parseCmd(sys.argv[1], [
            "update", "hook", "init", "clean", "list", "add", "remove", "clear", "make"
        ])
        opts, args = getopt.getopt(sys.argv[1:], "hv", ["help", "version"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()

    try:
        if cmd:
            if cmd == "update":
                checkAndAutoUpdate(True)
        else:
            if not opts:
                if len(args) > 0:
                    updateTag(args[0])
                else:
                    usage()
                return
            for o, a in opts:
                if o in ("-h", "--help"):
                    usage()
                if o in ("-v", "--version"):
                    print(__version__)
                    return
    except ValueError as err:
        print(str(err))
        usage()


def _parseCmd(arg, cmds):
    for c in cmds:
        if arg == c:
            return arg
    return None


# you can run the functions of the module or some test methods here
def main():
    # check arguments
    initEnvironment()
    _parseArgv()


if __name__ == "__main__":
    main()
