#!/usr/bin/python
# -*- coding: utf-8 -*-
"""  A Tool to generate doc of source Files in given dir.  """
__author__ = 'luochenxun'
__version__ = '1.1.0'
__projectName__ = 'docMaker'

import getopt
import sys
import re
from sys import argv
import os.path
import locale
import datetime
import shutil
import json
import collections
import pickle
import base64
import time


def usage():
    """ Print the usage as help """
    print("\n%s is a extensible tool to hook your git projects. version:%s ." %(__projectName__, __version__))
    print("\nUsage: %s <cmd> [OPTIONS] [param]" % __projectName__)
    print("  init          : init the environment of the project, write the config in ~/.%s" %__projectName__)
    print("  -h            : print this usage.")
    print("  -v            : print the version of %s." % __projectName__)
    print("\nFor more infomation of the cmd, you can use option as \'%s add -h\' for farther help." % __projectName__)
    print("")
    _exit()


""" global variables """
gConfig = None
M_PROJECT_REPOSITORY = "https://github.com/luochenxun/pyTools.git"
M_PROJECT_HOME = os.environ['HOME'] + "/.luochenxunTools/"
M_PROJECT_SYS_BIN = '/usr/local/bin/' + __projectName__
M_PROJECT_CONFIG = M_PROJECT_HOME + "config.json"
M_PROJECT_MAIN_FILE = M_PROJECT_HOME + __projectName__



class DocInfo:
    projectName = ''
    authorName = ''
    organization = ''  # the project's organization
    def __init__(self, projectName='', authorName='', organization=''):
        '''Constructor.'''
        self.projectName = projectName
        self.authorName = authorName
        self.organization = organization
    def initFromInteractiveSystem(self):
        self.projectName = raw_input('· Please input the project\'s name:\n-> ')
        self.authorName = raw_input('· Please input the authorName:\n-> ')
        self.organization = raw_input('· Please input the organization of your project:\n-> ')


def initEnvironment():
    # if sys.version_info < (3, 3):
    #     _exit("Error, the python version need to be greater than 3.3")
    global gConfig
    gConfig = _readGlobalConfig()
    checkAndAutoUpdate()


def checkAndAutoUpdate(forceUpdate = False):
    """ Check update half of day """
    global M_PROJECT_HOME, M_PROJECT_REPOSITORY, M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN
    global gConfig
    currentTime = int(time.time())
    lastUpdateTime = int(gConfig["date"])
    HalfOneDay = 20 * 60 * 60
    if gConfig[__projectName__] == None:
        # update the src code
        homeDir = os.getcwd()
        os.chdir(M_PROJECT_HOME)
        os.system("git clean -df 1>/dev/null 2>/dev/null;git reset --hard HEAD 1>/dev/null 2>/dev/null;git pull 1>/dev/null 2>/dev/null")
        os.chdir(homeDir)
        _autoUpdate()
    elif (lastUpdateTime + HalfOneDay) < currentTime or forceUpdate:
        # update the src code
        homeDir = os.getcwd()
        os.chdir(M_PROJECT_HOME)
        os.system("git clean -df 1>/dev/null 2>/dev/null;git reset --hard HEAD 1>/dev/null 2>/dev/null;git pull 1>/dev/null 2>/dev/null")
        os.chdir(homeDir)
        # check if the tool has a new update
        newToolSrc = open(M_PROJECT_MAIN_FILE)
        for line in newToolSrc:
            match = re.match('__version__ = \'(.+)\'', line)
            if match:
                newToolVersion = match.group(1)
                newToolVersionSplit = newToolVersion.split('.')
                currentVersionSplit = __version__.split('.')
                gConfig[__projectName__] = newToolVersion
                if len(newToolVersionSplit) != len(currentVersionSplit):
                    print('A new version existed, now updating...')
                    _autoUpdate()
                    break
                for i in range(len(newToolVersionSplit)):
                    if int(newToolVersionSplit[i]) > int(currentVersionSplit[i]):
                        print('A new version existed, now updating...')
                        _autoUpdate()
                        break
                    elif int(newToolVersionSplit[i]) < int(currentVersionSplit[i]):
                        break
                break
        _saveGolbalConfig(gConfig)
    if not os.path.exists(M_PROJECT_SYS_BIN):
        _autoUpdate()


def docSrc(path):
    if not os.path.exists(path):
        usage()
    docInfo = DocInfo()
    docInfo.initFromInteractiveSystem()
    if os.path.isdir(path):
        docSrcInDir(path, docInfo)
    else:
        docSrcInFile(os.path.basename(path), path, docInfo)

def docSrcInDir(dir, docInfo):
    # 遍历替换
    for parent, dirnames, filenames in os.walk(dir):
        for filename in filenames:                        #输出文件信息
            docSrcInFile(filename, os.path.join(parent, filename), docInfo)

def docSrcInFile(filename, filepath, docInfo):
    # iOS源码支持
    if filename.find('.h') != -1 or filename.find('.m') != -1:
        rfp = open(filepath)
        fp = open(filepath + '_tmp','w')  #打开你要写得文件test2.txt
        lines = rfp.readlines()
        newLines = []
        newLines.append('//' + '\n')
        newLines.append('// ' + filename + '\n')
        newLines.append('// ' + docInfo.projectName + '\n')
        newLines.append('//' + '\n')
        newLines.append('// Created by ' + docInfo.authorName + ' on ' + time.strftime("%Y-%m-%d") + '\n')
        newLines.append('// Copyright (c) %s年 %s. All rights reserved.' %(time.strftime('%Y'), docInfo.organization) + '\n')
        docStart = False
        docEnd = False
        for s in lines:
            # doc end
            if docEnd == True:
                newLines.append(s)
                continue
            # doc start
            if docStart == False and s.strip().startswith('//'):
                docStart = True
                continue
            if docStart == True and s.strip().startswith('//'):
                continue
            elif docStart == True:
                docEnd = True
            newLines.append(s)
        fp.writelines(newLines)
        fp.close
        rfp.close
        os.remove(filepath)
        shutil.move(filepath + '_tmp', filepath)

def _autoUpdate():
    global M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN
    print('Install the new tool to /usr/local/bin/%s' % __projectName__)
    shutil.copy(M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN)
    print('Success!')

def _readGlobalConfig():
    """
    Return the key-value map in config file:
    Config.json
    {
      version: current tool version
      date: the newest time of theck update
    }
    """
    global M_PROJECT_CONFIG
    # default config
    configDic = collections.OrderedDict()
    configDic[__projectName__] = __version__
    configDic["date"] = str(int(time.time()))
    # create a config file if not exists
    if not os.path.exists(M_PROJECT_HOME):
        os.makedirs(M_PROJECT_HOME)
    if not os.path.exists(M_PROJECT_HOME + '.git'):
        shutil.rmtree(M_PROJECT_HOME)
        os.system("git clone " + M_PROJECT_REPOSITORY + ' ' + M_PROJECT_HOME)
    if not os.path.exists(M_PROJECT_CONFIG):
        _saveGolbalConfig(configDic)
    else:  # read the config
        configReader = open(M_PROJECT_CONFIG, 'r')
        try:
            configText = configReader.read()
            configDic = json.loads(configText, object_pairs_hook=collections.OrderedDict)
        except Exception as e:
            _saveGolbalConfig(configDic)
        finally:
            configReader.close()
    return configDic


def _saveGolbalConfig(configDic):
    '''
    Save the given dic to the project's golbal config path:
    Config.json
    {
      version: current tool version
      date: the newest time of theck update
    }
    '''
    global M_PROJECT_CONFIG
    configWritter = open(M_PROJECT_CONFIG, 'w')
    try:
        configDic["date"] = str(int(time.time()))
        configWritter.write(json.dumps(configDic, indent=2))
    finally:
        configWritter.close()


def _exit(msg=None):
    if msg != None:
        print(msg)
    os._exit(1)


def _parseArgv():
    """
    pass the cmd & options of the command
    """
    if len(sys.argv) <= 1:
        usage()
        sys.exit(0)
    try:
        cmd = _parseCmd(sys.argv[1], [
            "update", "hook", "init", "clean", "list", "add", "remove", "clear", "make"
        ])
        opts, args = getopt.getopt(sys.argv[1:], "hv", ["help", "version"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()

    try:
        if cmd:
            if cmd == "update":
                checkAndAutoUpdate(True)
        else:
            if not opts:
                if len(args) > 0:
                    docSrc(args[0])
                else:
                    usage()
                return
            for o, a in opts:
                if o in ("-h", "--help"):
                    usage()
                if o in ("-v", "--version"):
                    print(__version__)
                    return
    except ValueError as err:
        print(str(err))
        usage()


def _parseCmd(arg, cmds):
    for c in cmds:
        if arg == c:
            return arg
    return None


# you can run the functions of the module or some test methods here
def main():
    # check arguments
    initEnvironment()
    _parseArgv()


if __name__ == "__main__":
    main()
